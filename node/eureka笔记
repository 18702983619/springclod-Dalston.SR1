eureka与zookeeper的区别
	
RDBMS (mysql/oracle/sqlserver) ==>ACID



	传统的数据库是ACID
		A:(Atomicity)原子性
			原子性很容易理解,也就是说事务里的所有操作要么全做,要么全不做,事务成功
			的条件是事务里的所有操作都成功,只要有一个操作失败,整个事务就失败,需要回滚.
			比如银行转账,从A账户转100给B账户,分两步:1)从A账户取100,2)存入B账户100.
			这两步要么一起完成,要么一起不完成.如果只完成一步,第二部失败,钱就会莫名其妙的少100元.
			
		
		C:(Consistency)一致性
			一致性也比较容易理解,也就是说数据库要一致处于一致的状态,事务的运行和不会改变数据库根本的一致性
		
		I:(Isolation)独立性
			所谓独立性是指并发的事务之间不会互相影响,如果一个事务要访问的数据正在被另一个事务修改,只要另外一个事务未
			提交,它说访问的数据就不会受未提交事务的影响.比如现在有个交易是从A账户转100到B账户,这个交易还未完成的情况下,
			如果此时B查询自己的账户,是看不到新增的100元的
		
		D:(Durability)持久性
			持久性是指一旦事务提交后,它说左的修改将会永久的保存再数据库上,即使出现宕机也不会丢失
NOSQL(redis/mongdb) ==>CAP			
	CAP
		C:(Consistency)强一致性
			
		A:(Availability)可用性
		
		P:(Partition)分区容错性

现在分布式系统最多只能同时较好的满足两个
	CAP理论的核心是:一个分布式系统不可能同时很好的满足一致性,可用性和分区容错性这三个需求,
	因此,根据CAP原理将nosql数据库分成了满足CA原则,满足CP原则和满足AP原则三大类:
		CA-单点集群,满足一致性,可用性的系统,通常子啊可扩展上不太强大.
		CP-满足一致性,分区容忍的系统,通常性能不是特别高
		AP-满足可用性,分区容忍性的系统,通常可能对一致性要求低一些
	
	分布式的系统P是绝对要被占用的	[网络延迟和网络闪断导致分区容错性成为必须的]	
	由于当前的网络硬件肯定会出现延迟丢包怕等问题所以分区容错性是我们必须要实现的
	
		
	zookeeper遵守CP
		当向注册中心查询服务列表时,我们可以容忍注册中心返回的时几分钟以前的注册信息,但不能接收
		服务器直接down掉不可用.也就是说,服务注册功能堆可用性的要求要高于一致性.但是zk会出现这样
		一种情况,当master节点因为网络故障于其他节点失去来联时,剩余节点会重新进行leader的选举.问题在于选举leader
		的时间太长,30~120秒,且选举期间整个zk集群都是不可以用的,这就导致在选举期间注册服务瘫痪
		在云部署环境下,因网络问题的使得zk集群失去master节点时较大概率会发生的事,孙然服务器能够最终恢复,
		但是漫长的选举时间导致的注册长期不可用时不能容忍的.
		
	
	eureka遵守AP
		eureka看明白了这一点,因此在涉及时就有先保证可用性.eureka各个节点都是平等的,
		几个节点挂掉不会影响正常节点的工作,剩余的节点依然可以提供注册和查询服务.而eureka注册
		时如果发现连接失败,则会自动切换至其他节点,只要有一台eureka还在,就能保证注册服务可用(保证可用)
		只不过查到的信息可能不是最新的(不保证强一致性).除此之外,eureka还有一种自我保护机制,如果15分钟类超过85%的
		节点都没有正常的心跳,那么eureka就认为客户端于注册中心出现网络故障,此时会出现以下几种情况
		
		1、eureka不再从注册列表中移除因为长时间没有收到心跳而应该过期的服务
		
		2、eureka任然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上（即保证当前节点依然可用）
		
		3、当网络稳定时，当前实例新的注册信息会被同步到其他节点中
			
		

	
