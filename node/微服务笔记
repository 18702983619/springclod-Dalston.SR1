微服务概述	
1.是什么
	就目前而言，对于微服务业界没有一个统一的标准定义
	
	但通常而言，微服务架构是一种架构模式或者说是一种架构风格，
	它提倡单一应用程序划分成一组小的服务，每个运行在其独立的自己的进程中，
	服务之间互相协调，互相配合，为用户提供最终价值，服务间采用轻量级的通信机制互相沟通
	（cloud通常是基于HTTP的restful api，Boubbo：rpc）.
	每个服务都是围绕着业务进行构建，并且能够被独立部署到生产环境、类生产环境等。
	另外有一个非常轻量级的集中管理来协调这些服务，可以使用不同的语言俩编写服务，
	也可以使用不同的数据存储。
1.技术维度
	微服务化的核心就是讲传统的一站式应用，根据业务拆分成一个一个的服务，
	彻底地去耦合，每个微服务提供单一业务功能的服务，一个服务做一件事
	，从技术角度看就是一种小而独立的处理过程，类似进程概念，
	能够自行单独启动或销毁，拥有自己独立的数据库
	
2.微服务与微服务架构
	1.微服务
		强调的是服务的大小，它关注的是某一个点，是具体解决
		某一个问题/提供落地对应服务的一个服务应用，
		狭义的看，可以看做eclipse里面的一个个微服务工程/module
	2.微服务架构
		Eclipse工具里面用maven开发的一个个独立的小model，
		它具体使用springboot开发的一个小模块，专业的事情交给专业的模块
		来做，一个模块就做这一件事情
		强调的是一个个的个体，每个个体完成一个具体的任务或者功能

3.微服务优缺点
1.优点
①　每个微服务足够内聚，足够小，代码容易理解这样能聚焦一个指定的业务功能或业务需求
②　开发简单、开发效率提高，一个服务可能就是转移的只干一件事
③　微服务能够被小团队单独开发，这个小团队是2到5个人的开发人员组成。
④　微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或者部署阶段都是独立的
⑤　微服务能使用不用的语言开发
⑥　易于和第三发集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如Jenkins，Hudson，bamboo。
⑦　无服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果，无线通过合作才能体现价值
⑧　微服务允许你被利用融合最新技术
⑨　微服务只是业务逻辑代码，不会和HTML,CSS,或其他界面组合混合
⑩　每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库
2.缺点
①　开发人员要处理分布式系统的复杂性
②　多服务运维难度，随着服务的增加，运维的压力也增大
③　系统部署依赖
④　服务间通信成本
⑤　数据一致性
⑥　系统集成测试
⑦　性能监控

4.微服务技术栈有哪些

多种技术的集合体
分布式的微服务架构维度
服务的治理               
服务的注册
服务的调用               		  springcloud
服务的负载均衡
服务的监控


服务接口调用（客户端代用服务的简化工具）	Feign等
消息队列	Kafka、rabbitMQ、ActiveMO等
服务配置中心管理	Springconfig、chef等
服务路由（API网关）	Zuul等
服务监控	Zabbix、nagios、metrics、spectator等
全链路追踪	Zipkin、brave、dapper等
服务部署	Docker、openstack、kuberneters等
数据流操作开发包	Springcloud stream（封装Redis，rabbit，kafka等发送接收消息）
事件消息总线	Springcloud bus



