概述：单词hystrix

	
Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的
会调用失败，比如超时，异常，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败
，避免级联故障，以提高分布式系统的弹性。


来源：
	多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和
	微服务C又调用其他的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用
	响应使劲过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，而引起系统崩溃，
	所谓的“雪崩效应”。
	
	对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。
	比失败更糟糕的是，这些应用秩序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源的紧张，
	导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖管理失败，不能取消整个应用程序或系统。
	
作用：
		
	“断路器”本省是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），
	向调用方返回一个符合预期的，可处理的备选响应（fallback)，而不是长时间的等待或者抛出调用方法
	无法处理的异常，这样就保证了服务调用方的线程不会被长时间，不必要地占用，从而避免了故障在分布式系统中蔓延，乃至雪崩。
		
	官方资料： 
	https://github.com/Netflix/Hystrix/ 	

原理：
	
	服务熔断
	熔断机制是应对雪崩效应的一种微服务链路保护机制
	当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回“错误”
	的响应信息。当检测到该节点微服务调用响应正常后恢复调用链路，在springcloud框架里熔断机制通过Hystrix实现。Hystrix会
	监控微服务键调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败就会启动熔断机制。熔断机制的注解是@HystrixCommand
	

pom.xml 

<!-- 添加hystrix熔断 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-hystrix</artifactId>
		</dependency>


服务降级:
	整体资源快不够了，忍痛将某些服务器关掉，待度过难关时再开启回来
	系统资源腾出来支援别的用途了
	
	大坑
	1、feign: 
  	hystrix: 
    enabled: true 少写了d
    
 
	2、@Component 千万不要忘记这个类上面添加@Component注解，大坑！！！
	
	
总结：
	避免服务雪崩，需要进行服务熔断
	主业务逻辑和异常（熔断）处理分离解耦，
	将分散的fallback统一放到一个接口中处理
	针对每一个方法接口做统一处理
	服务熔断：
		一般是某个服务故障或者异常引起，类似实现实际中“保险丝”
		当某个异常条件被触发，直接熔断整个服务，而不是一直等到服务超时。
	服务降级：
		所谓降级，一般是从整体负荷考虑。就是当某个服务熔断之后，服务
		将不再被调用，
		此时客户端可以自己准备一个本地的fallback回调，返回一个缺省值。
		这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强
	
	
	

			